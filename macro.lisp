(defun add (a b)
  (let ((x (+ a b)))
    (format t "The sum is ~a" x)
    x))

(add 2 3)



;; var
;; 最初の引数はローカル変数として定義される名前
;; マクロの中では引数varの値がその名前になっている。
;; foo
;;
;; val
;; 2番目の式はローカル変数の値を決めるコード。
;; (+ 2 3)
;;
;; body
;; let1の中で実行されるコードの本体。
;; let1が作る新しい変数(foo)を使うことが出来る。
;; マクロではこのコードが引数bodyの値として使える。
;;
;; &body
;; letコマンドは本体の中に複数の式をくことが出来る。
;; let1も同じように使えると良い。
;; &bodyはマクロ展開時に「マクロの使われている場所に出てくる残りの式をすべてリストにして次の引数に渡してくれ」ということ。
;; body引数に渡ってくる値はネストしたリスト((* foo foo))になっている。

(defmacro let1 (var val &body body)
  `(let ((,var ,val))
     ,@body))


(let ((foo (+ 2 3)))
  (* foo foo))
;; 25

(let1 foo (+ 2 3)
  (* foo foo))
